--- 
author: Sudothinker
title: Rails 2.3 Upgrade Problems and Solutions
date: 02/03/2009

<h3>Cucumber</h3>

This fix will address "undefined method `visits' for #<ActionController::Integration::Session:0xb702e6a0> (NoMethodError)"

<pre><code class="ruby"># features/env.rb

require 'webrat/rails'
Webrat.configure do |config|
  config.mode = :rails
end
</code></pre>

<h3>Gems</h3>

This fix will address "uninitialized constant RedCloth (NameError)"
 
<pre><code class="ruby"># config/environment.rb

config.gem "RedCloth", :lib => "redcloth", :source => "http://code.whytheluckystiff.net"
</code></pre>

<pre><code>rake gems:unpack
rake gems:build
</code></pre>

<h3>Forms</h3>

Fields for now should be called on the outter form, before I had

<pre><code class="ruby">fields_for 'video[ingredient_attributes][]', ingredient do |i_form|</code></pre>

which used the "Multimodel Forms plugin":http://code.google.com/p/multimodel-forms/.

Now this becomes:

<pre><code class="ruby">video_form.fields_for :ingredients do |i_form|</code></pre>

See "http://ryandaigle.com/articles/2009/2/1/what-s-new-in-edge-rails-nested-attributes":http://ryandaigle.com/articles/2009/2/1/what-s-new-in-edge-rails-nested-attributes for more information.

<h3>Try</h3>

The version of try I had was this:

<pre><code class="ruby">
class Object
  def try(method)
    send method if respond_to? method
  end
end
</code></pre>

in rails 2.3 though the try method is changed to this:

<pre><code class="ruby">
class Object
  def try(method, *args, &block)
    send(method, *args, &block)
  end
end

class NilClass
   def try(method, *args, &block)
     nil
   end
end
</code></pre>

So I got a bunch of undefined method errors which I had to change around to use respond_to, or move the try up the chain so it gets called on nil.

<h3>SimplyHelpful</h3>

Get rid of this, the functionality has been added to rails. You might see "uninitialized constant SimplyHelpful::Record Identifier (ActionView::TemplateError)" otherwise.

<h3>route_for</h3>

After a change to edge rails broke our monkey-patched #route_for method, I
decided to just delegate to rails' #assert_generates method. For most cases,
this will not present a problem, but for some it might. You'll know if you
upgrade and see any newly failing, route-related examples. Here are the things
that you might need to change.
 
* Make sure IDs are strings
 
If you had :id => 1 before, you need to change that to :id => "1"
 
<pre><code class="ruby">
#old
route_for(:controller => 'things', :action => 'show', :id => 1).should == "/things/1"
  
#new
route_for(:controller => 'things', :action => 'show', :id => "1").should == "/things/1"
</code></pre>

* Convert paths for non-get methods to hashes
 
If you had an example with a route that requires post, put, or delete, you'll
need to declare that explicitly.
 
<pre><code class="ruby">
#old
route_for(:controller => 'things', :action => 'create').should == "/things"
  
#new
route_for(:controller => 'things', :action => 'create').should == {:path => "/things", :method => :post}
</code></pre>

<h3>assert_select</h3>

I was using assert_select (should have_tag) in rspec in model specs to verify to_xml representations of models. This isn't really recommended as have_tag should really only be used for html. Instead I used Hpricot to parse the xml (Hpricot.XML) and then verified the contents of the hpricot object.

